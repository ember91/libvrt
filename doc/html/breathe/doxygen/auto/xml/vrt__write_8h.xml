<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="vrt__write_8h" kind="file" language="C++">
    <compoundname>vrt_write.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes refid="vrt__types_8h" local="no">vrt/vrt_types.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>/home/emil/libvrt/include/vrt/vrt_write.h</label>
        <link refid="vrt__write_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>vrt/vrt_types.h</label>
        <link refid="vrt__types_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="vrt__write_8h_1af2ee55c43a41c7f91efefd85b5f82314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vrt_write_header</definition>
        <argsstring>(const vrt_header *header, void *buf, uint32_t buf_words, bool validate)</argsstring>
        <name>vrt_write_header</name>
        <param>
          <type>const <ref refid="structvrt__header" kindref="compound">vrt_header</ref> *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buf_words</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>validate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Low-level function that writes VRT header section.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>Header to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_words</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buf in 32-bit words. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>validate</parametername>
</parameternamelist>
<parameterdescription>
<para>True if validation should be done. If false, only buffer size is validated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of written 32-bit words (always 1), or a negative number if error. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>VRT_ERR_BUF_SIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer is too small. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_PACKET_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet type is an invalid value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_TSM</parametername>
</parameternamelist>
<parameterdescription>
<para>Data packet has TSM bit set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_TSI</parametername>
</parameternamelist>
<parameterdescription>
<para>TSI is an invalid value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_TSF</parametername>
</parameternamelist>
<parameterdescription>
<para>TSF is an invalid value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_PACKET_COUNT</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet count is outside valid bounds (&gt; 0x0F).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>May requires output buffer data to be byte swapped if platform endianess isn&apos;t big endian (network order). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_write.h" line="30" column="9" declfile="/home/emil/libvrt/include/vrt/vrt_write.h" declline="30" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="vrt__write_8h_1a674809acda7b0baf66659388402a5918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vrt_write_fields</definition>
        <argsstring>(const vrt_header *header, const vrt_fields *fields, void *buf, uint32_t buf_words, bool validate)</argsstring>
        <name>vrt_write_fields</name>
        <param>
          <type>const <ref refid="structvrt__header" kindref="compound">vrt_header</ref> *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>const <ref refid="structvrt__fields" kindref="compound">vrt_fields</ref> *</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buf_words</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>validate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Low-level function that writes VRT fields section.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>Header. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fields</parametername>
</parameternamelist>
<parameterdescription>
<para>Fields to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write to. This must point to the start of the fields section, i.e. directly following the header word. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_words</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buf in 32-bit words. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>validate</parametername>
</parameternamelist>
<parameterdescription>
<para>True if validation should be done. If false, only buffer size is validated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of written 32-bit words, or a negative number if error. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>VRT_ERR_BUF_SIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer is too small. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_REAL_TIME</parametername>
</parameternamelist>
<parameterdescription>
<para>Fractional seconds Real time is activated but picoseconds is outside bounds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_OUI</parametername>
</parameternamelist>
<parameterdescription>
<para>OUI is outside valid bounds (&gt; 0x00FFFFFF). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_write.h" line="47" column="9" declfile="/home/emil/libvrt/include/vrt/vrt_write.h" declline="47" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="vrt__write_8h_1a9727ae1e20fd1d29bf74b1ca266aa928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vrt_write_trailer</definition>
        <argsstring>(const vrt_trailer *trailer, void *buf, uint32_t buf_words, bool validate)</argsstring>
        <name>vrt_write_trailer</name>
        <param>
          <type>const <ref refid="structvrt__trailer" kindref="compound">vrt_trailer</ref> *</type>
          <declname>trailer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buf_words</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>validate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Low-level function that writes VRT trailer section.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trailer</parametername>
</parameternamelist>
<parameterdescription>
<para>Trailer to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write to. This must point to the position of the trailer word, i.e. the last word in the packet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_words</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buf in 32-bit words. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>validate</parametername>
</parameternamelist>
<parameterdescription>
<para>True if validation should be done. If false, only buffer size is validated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of written 32-bit words, or a negative number if error. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>VRT_ERR_BUF_SIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer is too small. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_ASSOCIATED_CONTEXT_PACKET_COUNT</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated context packet count is outside valid bounds (&gt; 0x7F). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_write.h" line="66" column="9" declfile="/home/emil/libvrt/include/vrt/vrt_write.h" declline="66" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="vrt__write_8h_1a00473fbc35757974a8451f3420423f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vrt_write_if_context</definition>
        <argsstring>(const vrt_if_context *if_context, void *buf, uint32_t buf_words, bool validate)</argsstring>
        <name>vrt_write_if_context</name>
        <param>
          <type>const <ref refid="structvrt__if__context" kindref="compound">vrt_if_context</ref> *</type>
          <declname>if_context</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buf_words</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>validate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Low-level function that writes VRT IF context section.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>if_context</parametername>
</parameternamelist>
<parameterdescription>
<para>IF context to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write to. This must point to the first context section word in the packet, i.e. directly following the fields section. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_words</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buf in 32-bit words. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>validate</parametername>
</parameternamelist>
<parameterdescription>
<para>True if validation should be done. If false, only buffer size is validated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of written 32-bit words, or a negative number if error. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>VRT_ERR_BUF_SIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer is too small. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_BANDWIDTH</parametername>
</parameternamelist>
<parameterdescription>
<para>Bandwidth is negative. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_SAMPLE_RATE</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample rate is negative. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_TEMPERATURE</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature is below absolute zero (&lt; -273.15). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_OUI</parametername>
</parameternamelist>
<parameterdescription>
<para>OUI is outside valid bounds (&gt; 0x00FFFFFF). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_PACKING_METHOD</parametername>
</parameternamelist>
<parameterdescription>
<para>Packing method is an invalid value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_REAL_OR_COMPLEX</parametername>
</parameternamelist>
<parameterdescription>
<para>Real/Complex is an invalid value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_DATA_ITEM_FORMAT</parametername>
</parameternamelist>
<parameterdescription>
<para>Data item format is an invalid value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_EVENT_TAG_SIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>Event tag size is outside valid bounds (&gt; 0x07). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_CHANNEL_TAG_SIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel tag size is outside valid bounds (&gt; 0x0F). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_ITEM_PACKING_FIELD_SIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>Item packing fields size is outside valid bounds (&gt; 0x3F). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_DATA_ITEM_SIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>Data item size is outside valid bounds (&gt; 0x3F). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_TSI</parametername>
</parameternamelist>
<parameterdescription>
<para>TSI is an invalid value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_TSF</parametername>
</parameternamelist>
<parameterdescription>
<para>TSF is an invalid value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_INTEGER_SECOND_TIMESTAMP</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer second timestamp is not 0xFFFFFFFF when TSI is VRT_TSI_UNDEFINED. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_FRACTIONAL_SECOND_TIMESTAMP</parametername>
</parameternamelist>
<parameterdescription>
<para>Fractional second timestamp is not 0xFFFFFFFFFFFFFFFF when TSF is VRT_TSF_UNDEFINED. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_REAL_TIME</parametername>
</parameternamelist>
<parameterdescription>
<para>Fractional seconds Real time is active but picoseconds is outside bounds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_LATITUDE</parametername>
</parameternamelist>
<parameterdescription>
<para>Latitude is outside valid bounds (&lt; -90 or &gt; 90). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_LONGITUDE</parametername>
</parameternamelist>
<parameterdescription>
<para>Longitude is outside valid bounds (&lt; -180 or &gt; 180). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_SPEED_OVER_GROUND</parametername>
</parameternamelist>
<parameterdescription>
<para>Speed over ground is negative. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_HEADING_ANGLE</parametername>
</parameternamelist>
<parameterdescription>
<para>Heading angle outside valid bounds (&lt; 0 or &gt; 359.999999761582). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_TRACK_ANGLE</parametername>
</parameternamelist>
<parameterdescription>
<para>Track angle is outside valid bounds (&lt; 0 or &gt; 359.999999761582). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_MAGNETIC_VARIATION</parametername>
</parameternamelist>
<parameterdescription>
<para>Magnetic variation is outside valid bounds (&lt; -180 or &gt; 180). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_SOURCE_LIST_SIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>Source list size is outside valid bounds (&gt; 0x01FF). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_SYSTEM_LIST_SIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>System list size is outside valid bounds (&gt; 0x01FF). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VRT_ERR_CHANNEL_LIST_SIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel list size is outside valid bounds (&gt; 0x7FFF).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Fields represented as double but with an underlying 64-bit fixed precision format, i.e. bandwidth, if_reference_frequency, rf_reference_frequency, rf_reference_frequency_offset, if_band_offset, and sample_rate, may in rare cases lose precision since double only has 53 bits of precision. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_write.h" line="110" column="9" declfile="/home/emil/libvrt/include/vrt/vrt_write.h" declline="110" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>INCLUDE_VRT_VRT_WRITE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_VRT_VRT_WRITE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vrt/vrt_types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">int32_t<sp/>vrt_write_header(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvrt__header" kindref="compound">vrt_header</ref>*<sp/>header,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf,<sp/>uint32_t<sp/>buf_words,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validate);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">int32_t<sp/>vrt_write_fields(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvrt__header" kindref="compound">vrt_header</ref>*<sp/>header,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvrt__fields" kindref="compound">vrt_fields</ref>*<sp/>fields,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf_words,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validate);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">int32_t<sp/>vrt_write_trailer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvrt__trailer" kindref="compound">vrt_trailer</ref>*<sp/>trailer,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf,<sp/>uint32_t<sp/>buf_words,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validate);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">int32_t<sp/>vrt_write_if_context(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvrt__if__context" kindref="compound">vrt_if_context</ref>*<sp/>if_context,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf,<sp/>uint32_t<sp/>buf_words,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validate);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/emil/libvrt/include/vrt/vrt_write.h"/>
  </compounddef>
</doxygen>
