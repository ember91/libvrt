<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structvrt__if__context" kind="struct" language="C++" prot="public">
    <compoundname>vrt_if_context</compoundname>
    <includes refid="vrt__types_8h" local="no">vrt_types.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structvrt__if__context_1a3bf4bd79566d9d8a525bde724dc4e43d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vrt_if_context::context_field_change_indicator</definition>
        <argsstring></argsstring>
        <name>context_field_change_indicator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if this packet contains new context information.</para>
<para><simplesect kind="note"><para>This is sometimes called named indicator and sometimes identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="652" column="10" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="652" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1a53ef7c9e63248d99680520a4157a178e" prot="public" static="no" mutable="no">
        <type><ref refid="structvrt__context__indicators" kindref="compound">vrt_context_indicators</ref></type>
        <definition>vrt_context_indicators vrt_if_context::has</definition>
        <argsstring></argsstring>
        <name>has</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Field presence indicators. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="654" column="28" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="654" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1a1836811f58567f60ae9490f04ea3f83d" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t vrt_if_context::reference_point_identifier</definition>
        <argsstring></argsstring>
        <name>reference_point_identifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stream ID of for which the context packet applies. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="656" column="14" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="656" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1a8087cf0c9483c36c507178c2e1bf1656" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double vrt_if_context::bandwidth</definition>
        <argsstring></argsstring>
        <name>bandwidth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bandwidth [Hz].</para>
<para><simplesect kind="note"><para>Negative values are not valid. </para>
</simplesect>
<simplesect kind="warning"><para>This may lead to loss of precision, since the underlying VRT fixed point format has 64 bits while a double only has 53 bits of precision. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="664" column="12" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1aa23eef31ea8163f0ff9c18eff309ee6f" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double vrt_if_context::if_reference_frequency</definition>
        <argsstring></argsstring>
        <name>if_reference_frequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Center frequency [Hz].</para>
<para><simplesect kind="warning"><para>This may lead to loss of precision, since the underlying VRT fixed point format has 64 bits while a double only has 53 bits of precision. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="671" column="12" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1ae471b521712bfcfcb9321a052b9d86be" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double vrt_if_context::rf_reference_frequency</definition>
        <argsstring></argsstring>
        <name>rf_reference_frequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Original center frequency before translation [Hz].</para>
<para><simplesect kind="warning"><para>This may lead to loss of precision, since the underlying VRT fixed point format has 64 bits while a double only has 53 bits of precision. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="678" column="12" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="678" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1a5684ff845b2b4632909989571dcb032d" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double vrt_if_context::rf_reference_frequency_offset</definition>
        <argsstring></argsstring>
        <name>rf_reference_frequency_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Original frequency is the sum of this and rf_reference_frequency [Hz].</para>
<para><simplesect kind="warning"><para>This may lead to loss of precision, since the underlying VRT fixed point format has 64 bits while a double only has 53 bits of precision. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="685" column="12" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="685" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1a96bdb639f7b371acddfeaad33a598bf3" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double vrt_if_context::if_band_offset</definition>
        <argsstring></argsstring>
        <name>if_band_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Offset from IF reference frequency to center of the band [Hz]. Band center is the sum of this and if_reference_frequency.</para>
<para><simplesect kind="warning"><para>This may lead to loss of precision, since the underlying VRT fixed point format has 64 bits while a double only has 53 bits of precision. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="693" column="12" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1abc72d5b1d320c22f84b481f63c1e78aa" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float vrt_if_context::reference_level</definition>
        <argsstring></argsstring>
        <name>reference_level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Physical signal amplitude at the Reference Point [dBm]. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="695" column="11" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1ae19d07521d3445e5980feae0f1418b39" prot="public" static="no" mutable="no">
        <type><ref refid="structvrt__gain" kindref="compound">vrt_gain</ref></type>
        <definition>vrt_gain vrt_if_context::gain</definition>
        <argsstring></argsstring>
        <name>gain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gain. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="697" column="14" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="697" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1abce6cd04c27eb853c234beec81a7904b" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t vrt_if_context::over_range_count</definition>
        <argsstring></argsstring>
        <name>over_range_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of over-range samples, i.e. samples with too high amplitude. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="701" column="14" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1a29b5d7818c7caae27e6554aa149ac3fa" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double vrt_if_context::sample_rate</definition>
        <argsstring></argsstring>
        <name>sample_rate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sample rate [Hz].</para>
<para><simplesect kind="warning"><para>This may lead to loss of precision, since the underlying VRT fixed point format has 64 bits while a double only has 53 bits of precision. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="708" column="12" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="708" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1a84fc7c6110a28f19ee116b9657ae3a0f" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t vrt_if_context::timestamp_adjustment</definition>
        <argsstring></argsstring>
        <name>timestamp_adjustment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>System signal processing time [ps]. Offset from reference point time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="710" column="14" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1a385a7aa0d9660e795f9c93a075a9c5c9" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t vrt_if_context::timestamp_calibration_time</definition>
        <argsstring></argsstring>
        <name>timestamp_calibration_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Time when timestamp was known to be correct, i.e. calibrated [s]. Represented in the same way as the TSI field. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="714" column="14" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1a3ea0588f9020ba1273103af82337a1aa" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float vrt_if_context::temperature</definition>
        <argsstring></argsstring>
        <name>temperature</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Temperature of some component in the signal chain that may affect the signal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="716" column="11" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1a2a04c1b5f6aeb9cf9185ad925ae08130" prot="public" static="no" mutable="no">
        <type><ref refid="structvrt__device__identifier" kindref="compound">vrt_device_identifier</ref></type>
        <definition>vrt_device_identifier vrt_if_context::device_identifier</definition>
        <argsstring></argsstring>
        <name>device_identifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Identifies device carrying a context packet stream. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="718" column="27" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1af2e17c7336aaabf85b3fdddbf6bf4892" prot="public" static="no" mutable="no">
        <type><ref refid="structvrt__state__and__event" kindref="compound">vrt_state_and_event</ref></type>
        <definition>vrt_state_and_event vrt_if_context::state_and_event_indicators</definition>
        <argsstring></argsstring>
        <name>state_and_event_indicators</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Conveys state information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="720" column="25" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="720" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1a392dc5fe3a82ec11ae0f121b308b3198" prot="public" static="no" mutable="no">
        <type><ref refid="structvrt__data__packet__payload__format" kindref="compound">vrt_data_packet_payload_format</ref></type>
        <definition>vrt_data_packet_payload_format vrt_if_context::data_packet_payload_format</definition>
        <argsstring></argsstring>
        <name>data_packet_payload_format</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Describes formatting of data stream in data packets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="722" column="36" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1ac8022318666fd286fd541ab02770c180" prot="public" static="no" mutable="no">
        <type><ref refid="structvrt__formatted__geolocation" kindref="compound">vrt_formatted_geolocation</ref></type>
        <definition>vrt_formatted_geolocation vrt_if_context::formatted_gps_geolocation</definition>
        <argsstring></argsstring>
        <name>formatted_gps_geolocation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GPS information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="724" column="31" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="724" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1a09d0a8f6b8f4fb22147cf75e750e30db" prot="public" static="no" mutable="no">
        <type><ref refid="structvrt__formatted__geolocation" kindref="compound">vrt_formatted_geolocation</ref></type>
        <definition>vrt_formatted_geolocation vrt_if_context::formatted_ins_geolocation</definition>
        <argsstring></argsstring>
        <name>formatted_ins_geolocation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>INS information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="726" column="31" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="726" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1ab681d4901ca72b0ac0952c7970ae7e7a" prot="public" static="no" mutable="no">
        <type><ref refid="structvrt__ephemeris" kindref="compound">vrt_ephemeris</ref></type>
        <definition>vrt_ephemeris vrt_if_context::ecef_ephemeris</definition>
        <argsstring></argsstring>
        <name>ecef_ephemeris</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ECEF (earth-centered, earth-fixed) coordinates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="728" column="19" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="728" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1aff5c73802f8a80969c65f863e63befbf" prot="public" static="no" mutable="no">
        <type><ref refid="structvrt__ephemeris" kindref="compound">vrt_ephemeris</ref></type>
        <definition>vrt_ephemeris vrt_if_context::relative_ephemeris</definition>
        <argsstring></argsstring>
        <name>relative_ephemeris</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Coordinates with user defined point of reference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="730" column="19" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1a0260a08fb9613686ff577544d5088ba7" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t vrt_if_context::ephemeris_reference_identifier</definition>
        <argsstring></argsstring>
        <name>ephemeris_reference_identifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stream ID of relative ephemeris origin. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="732" column="14" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="732" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1ae530fb82ee9046b876b0cf19f5d8fe01" prot="public" static="no" mutable="no">
        <type><ref refid="structvrt__gps__ascii" kindref="compound">vrt_gps_ascii</ref></type>
        <definition>vrt_gps_ascii vrt_if_context::gps_ascii</definition>
        <argsstring></argsstring>
        <name>gps_ascii</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GPS ASCII positional information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="734" column="19" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvrt__if__context_1a2541ca0d90dd45ef63e58bae66722845" prot="public" static="no" mutable="no">
        <type><ref refid="structvrt__context__association__lists" kindref="compound">vrt_context_association_lists</ref></type>
        <definition>vrt_context_association_lists vrt_if_context::context_association_lists</definition>
        <argsstring></argsstring>
        <name>context_association_lists</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Describes which data packets are associated to this context packet.</para>
<para><simplesect kind="note"><para>This is sometimes called lists and sometimes list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="740" column="35" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="740" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Context section data. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="10">
        <label>vrt_data_packet_payload_format</label>
        <link refid="structvrt__data__packet__payload__format"/>
      </node>
      <node id="8">
        <label>vrt_formatted_geolocation</label>
        <link refid="structvrt__formatted__geolocation"/>
        <childnode refid="9" relation="usage">
          <edgelabel>has</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>vrt_formatted_geolocation_indicators</label>
        <link refid="structvrt__formatted__geolocation__indicators"/>
      </node>
      <node id="12">
        <label>vrt_ephemeris_indicators</label>
        <link refid="structvrt__ephemeris__indicators"/>
      </node>
      <node id="7">
        <label>vrt_device_identifier</label>
        <link refid="structvrt__device__identifier"/>
      </node>
      <node id="13">
        <label>vrt_context_association_lists</label>
        <link refid="structvrt__context__association__lists"/>
        <childnode refid="14" relation="usage">
          <edgelabel>has</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>vrt_context_indicators</label>
        <link refid="structvrt__context__indicators"/>
      </node>
      <node id="14">
        <label>vrt_context_association_lists_indicators</label>
        <link refid="structvrt__context__association__lists__indicators"/>
      </node>
      <node id="4">
        <label>vrt_state_and_event</label>
        <link refid="structvrt__state__and__event"/>
        <childnode refid="5" relation="usage">
          <edgelabel>has</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>vrt_gps_ascii</label>
        <link refid="structvrt__gps__ascii"/>
      </node>
      <node id="11">
        <label>vrt_ephemeris</label>
        <link refid="structvrt__ephemeris"/>
        <childnode refid="12" relation="usage">
          <edgelabel>has</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>vrt_if_context</label>
        <link refid="structvrt__if__context"/>
        <childnode refid="2" relation="usage">
          <edgelabel>gps_ascii</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>has</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>state_and_event_indicators</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>gain</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>device_identifier</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>formatted_ins_geolocation</edgelabel>
          <edgelabel>formatted_gps_geolocation</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>data_packet_payload_format</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>ecef_ephemeris</edgelabel>
          <edgelabel>relative_ephemeris</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>context_association_lists</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>vrt_state_and_event_indicators</label>
        <link refid="structvrt__state__and__event__indicators"/>
      </node>
      <node id="6">
        <label>vrt_gain</label>
        <link refid="structvrt__gain"/>
      </node>
    </collaborationgraph>
    <location file="/home/emil/libvrt/include/vrt/vrt_types.h" line="646" column="29" bodyfile="/home/emil/libvrt/include/vrt/vrt_types.h" bodystart="646" bodyend="741"/>
    <listofallmembers>
      <member refid="structvrt__if__context_1a8087cf0c9483c36c507178c2e1bf1656" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>bandwidth</name></member>
      <member refid="structvrt__if__context_1a2541ca0d90dd45ef63e58bae66722845" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>context_association_lists</name></member>
      <member refid="structvrt__if__context_1a3bf4bd79566d9d8a525bde724dc4e43d" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>context_field_change_indicator</name></member>
      <member refid="structvrt__if__context_1a392dc5fe3a82ec11ae0f121b308b3198" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>data_packet_payload_format</name></member>
      <member refid="structvrt__if__context_1a2a04c1b5f6aeb9cf9185ad925ae08130" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>device_identifier</name></member>
      <member refid="structvrt__if__context_1ab681d4901ca72b0ac0952c7970ae7e7a" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>ecef_ephemeris</name></member>
      <member refid="structvrt__if__context_1a0260a08fb9613686ff577544d5088ba7" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>ephemeris_reference_identifier</name></member>
      <member refid="structvrt__if__context_1ac8022318666fd286fd541ab02770c180" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>formatted_gps_geolocation</name></member>
      <member refid="structvrt__if__context_1a09d0a8f6b8f4fb22147cf75e750e30db" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>formatted_ins_geolocation</name></member>
      <member refid="structvrt__if__context_1ae19d07521d3445e5980feae0f1418b39" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>gain</name></member>
      <member refid="structvrt__if__context_1ae530fb82ee9046b876b0cf19f5d8fe01" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>gps_ascii</name></member>
      <member refid="structvrt__if__context_1a53ef7c9e63248d99680520a4157a178e" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>has</name></member>
      <member refid="structvrt__if__context_1a96bdb639f7b371acddfeaad33a598bf3" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>if_band_offset</name></member>
      <member refid="structvrt__if__context_1aa23eef31ea8163f0ff9c18eff309ee6f" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>if_reference_frequency</name></member>
      <member refid="structvrt__if__context_1abce6cd04c27eb853c234beec81a7904b" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>over_range_count</name></member>
      <member refid="structvrt__if__context_1abc72d5b1d320c22f84b481f63c1e78aa" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>reference_level</name></member>
      <member refid="structvrt__if__context_1a1836811f58567f60ae9490f04ea3f83d" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>reference_point_identifier</name></member>
      <member refid="structvrt__if__context_1aff5c73802f8a80969c65f863e63befbf" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>relative_ephemeris</name></member>
      <member refid="structvrt__if__context_1ae471b521712bfcfcb9321a052b9d86be" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>rf_reference_frequency</name></member>
      <member refid="structvrt__if__context_1a5684ff845b2b4632909989571dcb032d" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>rf_reference_frequency_offset</name></member>
      <member refid="structvrt__if__context_1a29b5d7818c7caae27e6554aa149ac3fa" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>sample_rate</name></member>
      <member refid="structvrt__if__context_1af2e17c7336aaabf85b3fdddbf6bf4892" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>state_and_event_indicators</name></member>
      <member refid="structvrt__if__context_1a3ea0588f9020ba1273103af82337a1aa" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>temperature</name></member>
      <member refid="structvrt__if__context_1a84fc7c6110a28f19ee116b9657ae3a0f" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>timestamp_adjustment</name></member>
      <member refid="structvrt__if__context_1a385a7aa0d9660e795f9c93a075a9c5c9" prot="public" virt="non-virtual"><scope>vrt_if_context</scope><name>timestamp_calibration_time</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
