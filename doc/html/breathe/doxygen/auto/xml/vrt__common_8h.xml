<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="vrt__common_8h" kind="file" language="C++">
    <compoundname>vrt_common.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes refid="vrt__types_8h" local="no">vrt/vrt_types.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="1">
        <label>/home/emil/libvrt/include/vrt/vrt_common.h</label>
        <link refid="vrt__common_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>vrt/vrt_types.h</label>
        <link refid="vrt__types_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="vrt__common_8h_1ae4cbfd2e2ff73da3b5ac98171e4626d3" prot="public" static="no">
        <name>STATIC_CAST</name>
        <param><defname>T</defname></param>
        <param><defname>X</defname></param>
        <initializer>(T)(X)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="21" column="10" bodyfile="/home/emil/libvrt/include/vrt/vrt_common.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4" prot="public" static="no" strong="no">
        <type></type>
        <name>vrt_error_code</name>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4af54661c5c72a821c5fc8ad198f006cee" prot="public">
          <name>VRT_ERR_BUF_SIZE</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Buffer is too small. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4aefc005beea43ec9f9690ef98b0d41ec2" prot="public">
          <name>VRT_ERR_RESERVED</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. One or multiple reserved bits are set. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4adb09f23bc2c6aed34bc7a19eb5a7a257" prot="public">
          <name>VRT_ERR_PACKET_TYPE</name>
          <initializer>= -3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Packet type is an invalid value. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4abf23674a416fafdc1599dd1d40691384" prot="public">
          <name>VRT_ERR_TRAILER</name>
          <initializer>= -4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Context packet has trailer bit set. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4ad74d8531f394af6aa90a7c04bf760b86" prot="public">
          <name>VRT_ERR_TSM</name>
          <initializer>= -5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Data packet has TSM bit set. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a60f67b18828a84b35e80c3a5de2c24d7" prot="public">
          <name>VRT_ERR_TSI</name>
          <initializer>= -6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. TSI is an invalid value. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4aa70fa58fa5a1d62e35ad40a83bc86c31" prot="public">
          <name>VRT_ERR_TSF</name>
          <initializer>= -7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. TSF is an invalid value. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4aab78c48c7486b8761f8b70e11de5be96" prot="public">
          <name>VRT_ERR_REAL_TIME</name>
          <initializer>= -8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Fractional seconds Real time is active but picoseconds is outside bounds. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a20b08e3de312325c01ea02820a627e32" prot="public">
          <name>VRT_ERR_PACKET_COUNT</name>
          <initializer>= -9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Packet count is outside valid bounds (&gt; 0x0F). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4ab5171fe0f970adef8908b77a1fdbf5ee" prot="public">
          <name>VRT_ERR_OUI</name>
          <initializer>= -10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. OUI is outside valid bounds (&gt; 0x00FFFFFF). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4af73a0d229377ec582253cc7ac5cd4693" prot="public">
          <name>VRT_ERR_ASSOCIATED_CONTEXT_PACKET_COUNT</name>
          <initializer>= -11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Associated context packet count is outside valid bounds (&gt; 0x7F). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4afdafe69e12e1192bd83c62846c20e3ab" prot="public">
          <name>VRT_ERR_BANDWIDTH</name>
          <initializer>= -12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Bandwidth is negative. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a32786fa705e6c352640fc5be06694d1e" prot="public">
          <name>VRT_ERR_SAMPLE_RATE</name>
          <initializer>= -13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Sample rate is negative. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a2ef9995ab6813c5b25851521dffb1ef2" prot="public">
          <name>VRT_ERR_TEMPERATURE</name>
          <initializer>= -14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Temperature is below absolute zero (&lt; -273.15). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a6bdb14ce815836aa8a383aac6e9ad29d" prot="public">
          <name>VRT_ERR_PACKING_METHOD</name>
          <initializer>= -15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Packing method is an invalid value. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4ad854821e0a87e56be3150e3f962b43aa" prot="public">
          <name>VRT_ERR_REAL_OR_COMPLEX</name>
          <initializer>= -16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Real/Complex is an invalid value. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a2026a82fe5cfb5389fd1a136f371f340" prot="public">
          <name>VRT_ERR_DATA_ITEM_FORMAT</name>
          <initializer>= -17</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Data item format is an invalid value. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4ac289810d1922be0fd6e3327fbf782746" prot="public">
          <name>VRT_ERR_EVENT_TAG_SIZE</name>
          <initializer>= -18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Event tag size is outside valid bounds (&gt; 0x07). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a49a49969ad24be06d079ff1e9b9cba90" prot="public">
          <name>VRT_ERR_CHANNEL_TAG_SIZE</name>
          <initializer>= -19</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Channel tag size is outside valid bounds (&gt; 0x0F). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a1831c080782522f9a46808aed2767411" prot="public">
          <name>VRT_ERR_ITEM_PACKING_FIELD_SIZE</name>
          <initializer>= -20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Item packing fields size is outside valid bounds (&gt; 0x3F). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a0448b5384f3b6f5cde5d703d12d6f5f8" prot="public">
          <name>VRT_ERR_DATA_ITEM_SIZE</name>
          <initializer>= -21</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Data item size is outside valid bounds (&gt; 0x3F). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4aa494acdad4a811beaaeb189581dc2aa9" prot="public">
          <name>VRT_ERR_INTEGER_SECOND_TIMESTAMP</name>
          <initializer>= -22</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Integer second timestamp is not 0xFFFFFFFF when TSI is VRT_TSI_UNDEFINED. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4acbe6c204630a4995a31c637cf3256c24" prot="public">
          <name>VRT_ERR_FRACTIONAL_SECOND_TIMESTAMP</name>
          <initializer>= -23</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Fractional second timestamp is not 0xFFFFFFFFFFFFFFFF when TSF is </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a8ad379d7ba6df0afaeacc25dbff2cbdb" prot="public">
          <name>VRT_ERR_LATITUDE</name>
          <initializer>= -24</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Latitude is outside valid bounds (&lt; -90 or &gt; 90). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a4fe71c9f8a5b896d6b98db76a7566e23" prot="public">
          <name>VRT_ERR_LONGITUDE</name>
          <initializer>= -25</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Longitude is outside valid bounds (&lt; -180 or &gt; 180). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4aed83e28557509e8bc92add519e084d85" prot="public">
          <name>VRT_ERR_SPEED_OVER_GROUND</name>
          <initializer>= -26</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Speed over ground is negative. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a781bd5ccd60db01391de3e430f7d1aa7" prot="public">
          <name>VRT_ERR_HEADING_ANGLE</name>
          <initializer>= -27</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Heading angle outside valid bounds (&lt; 0 or &gt; 359.999999761582). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4ade513680cd2c9f4da4022b5f5e27b4a3" prot="public">
          <name>VRT_ERR_TRACK_ANGLE</name>
          <initializer>= -28</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Track angle is outside valid bounds (&lt; 0 or &gt; 359.999999761582). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a651fd7aad02cfd3925a7aaca8fec61f2" prot="public">
          <name>VRT_ERR_MAGNETIC_VARIATION</name>
          <initializer>= -29</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Magnetic variation is outside valid bounds (&lt; -180 or &gt; 180). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a2e2e6f85277427057acbcf5c2cf79830" prot="public">
          <name>VRT_ERR_SOURCE_LIST_SIZE</name>
          <initializer>= -30</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Source list size is outside valid bounds (&gt; 0x01FF). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4a8ff76c027e4813408bda5a57d1adf41b" prot="public">
          <name>VRT_ERR_SYSTEM_LIST_SIZE</name>
          <initializer>= -31</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. System list size is outside valid bounds (&gt; 0x01FF). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vrt__common_8h_1a9abf070632d4fe3b3942f589a1576cd4af15fb76612d1feca18a3e2bbe5642488" prot="public">
          <name>VRT_ERR_CHANNEL_LIST_SIZE</name>
          <initializer>= -32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error return code. Channel list size is outside valid bounds (&gt; 0x7FFF). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Error code constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="27" column="28" bodyfile="/home/emil/libvrt/include/vrt/vrt_common.h" bodystart="27" bodyend="156"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="vrt__common_8h_1a3e44610f267afc6441a1c149083be04b" prot="public" static="no">
        <type>enum vrt_error_code</type>
        <definition>typedef enum vrt_error_code vrt_error_code</definition>
        <argsstring></argsstring>
        <name>vrt_error_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Error code constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="156" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="vrt__common_8h_1a541e0edfa3580d3802db81981c6fb8a7" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t VRT_WORDS_HEADER</definition>
        <argsstring></argsstring>
        <name>VRT_WORDS_HEADER</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Size of header in 32-bit words. Always 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="163" column="23" bodyfile="/home/emil/libvrt/include/vrt/vrt_common.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="vrt__common_8h_1a4b1c2b7216a6c475736a8916f2356486" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t VRT_WORDS_MAX_FIELDS</definition>
        <argsstring></argsstring>
        <name>VRT_WORDS_MAX_FIELDS</name>
        <initializer>= 6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size of fields section in 32-bit words. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="167" column="23" bodyfile="/home/emil/libvrt/include/vrt/vrt_common.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="vrt__common_8h_1a307bdc8029b624dc288a4745f3fee0b4" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t VRT_WORDS_MAX_TRAILER</definition>
        <argsstring></argsstring>
        <name>VRT_WORDS_MAX_TRAILER</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size of trailer in 32-bit words. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="171" column="23" bodyfile="/home/emil/libvrt/include/vrt/vrt_common.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="vrt__common_8h_1a03403462eb9cd5829ec720aa91b3ae10" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t VRT_WORDS_MAX_PACKET</definition>
        <argsstring></argsstring>
        <name>VRT_WORDS_MAX_PACKET</name>
        <initializer>= UINT16_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size of a VRT packet in 32-bit words. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="175" column="23" bodyfile="/home/emil/libvrt/include/vrt/vrt_common.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="vrt__common_8h_1a8e9c2e8dde51136486cc2e7d9728f6f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrt_init_header</definition>
        <argsstring>(vrt_header *header)</argsstring>
        <name>vrt_init_header</name>
        <param>
          <type><ref refid="structvrt__header" kindref="compound">vrt_header</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize header to a reasonable default state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>Header.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Packet size must still be set explicitly to the actual packet size in 32-bit words. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="184" column="6" declfile="/home/emil/libvrt/include/vrt/vrt_common.h" declline="184" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vrt__common_8h_1a9f7f55ea8ca949ef2f0f2033e8b9e896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrt_init_fields</definition>
        <argsstring>(vrt_fields *fields)</argsstring>
        <name>vrt_init_fields</name>
        <param>
          <type><ref refid="structvrt__fields" kindref="compound">vrt_fields</ref> *</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize fields section to a reasonable default state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fields</parametername>
</parameternamelist>
<parameterdescription>
<para>Fields. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="191" column="6" declfile="/home/emil/libvrt/include/vrt/vrt_common.h" declline="191" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vrt__common_8h_1ac48207b4c8fe750f09efca40d5d12130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrt_init_trailer</definition>
        <argsstring>(vrt_trailer *trailer)</argsstring>
        <name>vrt_init_trailer</name>
        <param>
          <type><ref refid="structvrt__trailer" kindref="compound">vrt_trailer</ref> *</type>
          <declname>trailer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize trailer to a reasonable default state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trailer</parametername>
</parameternamelist>
<parameterdescription>
<para>Trailer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="198" column="6" declfile="/home/emil/libvrt/include/vrt/vrt_common.h" declline="198" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vrt__common_8h_1a17707913c26e86919ef357b8ee303fb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrt_init_if_context</definition>
        <argsstring>(vrt_if_context *if_context)</argsstring>
        <name>vrt_init_if_context</name>
        <param>
          <type><ref refid="structvrt__if__context" kindref="compound">vrt_if_context</ref> *</type>
          <declname>if_context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize IF context to a reasonable default state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>if_context</parametername>
</parameternamelist>
<parameterdescription>
<para>IF context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="205" column="6" declfile="/home/emil/libvrt/include/vrt/vrt_common.h" declline="205" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vrt__common_8h_1a8070a11ce64da478e93bd0ec74aaaa89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t vrt_words_fields</definition>
        <argsstring>(const vrt_header *header)</argsstring>
        <name>vrt_words_fields</name>
        <param>
          <type>const <ref refid="structvrt__header" kindref="compound">vrt_header</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate size of fields section in 32-bit words.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>Header.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of 32-bit words the fields section consists of. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="214" column="10" declfile="/home/emil/libvrt/include/vrt/vrt_common.h" declline="214" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="vrt__common_8h_1a18ac9dbeb45b0a28b97160cb30dd3e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t vrt_words_trailer</definition>
        <argsstring>(const vrt_header *header)</argsstring>
        <name>vrt_words_trailer</name>
        <param>
          <type>const <ref refid="structvrt__header" kindref="compound">vrt_header</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate size of trailer in 32-bit words.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>Header, which contains trailer information.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of 32-bit words it consists of.</para>
</simplesect>
<simplesect kind="note"><para>If packet type is missing support for the trailer type, such as a context packet, this returns 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="225" column="10" declfile="/home/emil/libvrt/include/vrt/vrt_common.h" declline="225" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="vrt__common_8h_1abb62bd0691de8842da2c3e1a6fe47ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t vrt_words_if_context</definition>
        <argsstring>(const vrt_if_context *if_context)</argsstring>
        <name>vrt_words_if_context</name>
        <param>
          <type>const <ref refid="structvrt__if__context" kindref="compound">vrt_if_context</ref> *</type>
          <declname>if_context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate size of IF context section in 32-bit words.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>if_context</parametername>
</parameternamelist>
<parameterdescription>
<para>IF context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of 32-bit words it consists of. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="234" column="10" declfile="/home/emil/libvrt/include/vrt/vrt_common.h" declline="234" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="vrt__common_8h_1a02b3ce76d3e1969a9338c05dc15f52e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vrt_is_context</definition>
        <argsstring>(vrt_packet_type type)</argsstring>
        <name>vrt_is_context</name>
        <param>
          <type>vrt_packet_type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a specific packet type means it is a context packet.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if it is a IF or Ext context packet.</para>
</simplesect>
<simplesect kind="warning"><para>Undefined behaviour if type is outside bounds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="245" column="13" bodyfile="/home/emil/libvrt/include/vrt/vrt_common.h" bodystart="245" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="vrt__common_8h_1ad623c6295952d8d38af85f3a6419067e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vrt_has_stream_id</definition>
        <argsstring>(vrt_packet_type type)</argsstring>
        <name>vrt_has_stream_id</name>
        <param>
          <type>vrt_packet_type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a specific packet type means it has the Stream ID field.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if it has the Stream ID field.</para>
</simplesect>
<simplesect kind="warning"><para>Undefined behaviour if type is outside bounds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="258" column="13" bodyfile="/home/emil/libvrt/include/vrt/vrt_common.h" bodystart="258" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="vrt__common_8h_1aceb67c8bb9922e9588d19f87209faadc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vrt_is_platform_little_endian</definition>
        <argsstring>()</argsstring>
        <name>vrt_is_platform_little_endian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if platform is little endian. May be used to detect if byte swap is required for VRT data.</para>
<para><simplesect kind="return"><para>True if little endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emil/libvrt/include/vrt/vrt_common.h" line="267" column="13" bodyfile="/home/emil/libvrt/include/vrt/vrt_common.h" bodystart="267" bodyend="270"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#ifndef<sp/>INCLUDE_VRT_VRT_COMMON_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_VRT_VRT_COMMON_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vrt/vrt_types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Silence<sp/>warnings<sp/>when<sp/>using<sp/>C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STATIC_CAST(T,<sp/>X)<sp/>static_cast&lt;T&gt;(X)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STATIC_CAST(T,<sp/>X)<sp/>(T)(X)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>vrt_error_code<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_BUF_SIZE<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_RESERVED<sp/>=<sp/>-2,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_PACKET_TYPE<sp/>=<sp/>-3,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_TRAILER<sp/>=<sp/>-4,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_TSM<sp/>=<sp/>-5,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_TSI<sp/>=<sp/>-6,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_TSF<sp/>=<sp/>-7,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_REAL_TIME<sp/>=<sp/>-8,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_PACKET_COUNT<sp/>=<sp/>-9,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_OUI<sp/>=<sp/>-10,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_ASSOCIATED_CONTEXT_PACKET_COUNT<sp/>=<sp/>-11,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_BANDWIDTH<sp/>=<sp/>-12,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_SAMPLE_RATE<sp/>=<sp/>-13,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_TEMPERATURE<sp/>=<sp/>-14,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_PACKING_METHOD<sp/>=<sp/>-15,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_REAL_OR_COMPLEX<sp/>=<sp/>-16,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_DATA_ITEM_FORMAT<sp/>=<sp/>-17,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_EVENT_TAG_SIZE<sp/>=<sp/>-18,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_CHANNEL_TAG_SIZE<sp/>=<sp/>-19,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_ITEM_PACKING_FIELD_SIZE<sp/>=<sp/>-20,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_DATA_ITEM_SIZE<sp/>=<sp/>-21,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_INTEGER_SECOND_TIMESTAMP<sp/>=<sp/>-22,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_FRACTIONAL_SECOND_TIMESTAMP<sp/>=<sp/>-23,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_LATITUDE<sp/>=<sp/>-24,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_LONGITUDE<sp/>=<sp/>-25,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_SPEED_OVER_GROUND<sp/>=<sp/>-26,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_HEADING_ANGLE<sp/>=<sp/>-27,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_TRACK_ANGLE<sp/>=<sp/>-28,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_MAGNETIC_VARIATION<sp/>=<sp/>-29,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_SOURCE_LIST_SIZE<sp/>=<sp/>-30,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_SYSTEM_LIST_SIZE<sp/>=<sp/>-31,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>VRT_ERR_CHANNEL_LIST_SIZE<sp/>=<sp/>-32</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}<sp/>vrt_error_code;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>no<sp/>point<sp/>in<sp/>adding<sp/>max<sp/>sizes<sp/>for<sp/>e.g.<sp/>data<sp/>body<sp/>and<sp/>IF/Ext<sp/>context,<sp/>since<sp/>they<sp/>can<sp/>be<sp/>UINT16_MAX<sp/>-<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>VRT_WORDS_HEADER<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="167"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>VRT_WORDS_MAX_FIELDS<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="171"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>VRT_WORDS_MAX_TRAILER<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="175"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>VRT_WORDS_MAX_PACKET<sp/>=<sp/>UINT16_MAX;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vrt_init_header(<ref refid="structvrt__header" kindref="compound">vrt_header</ref>*<sp/>header);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vrt_init_fields(<ref refid="structvrt__fields" kindref="compound">vrt_fields</ref>*<sp/>fields);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vrt_init_trailer(<ref refid="structvrt__trailer" kindref="compound">vrt_trailer</ref>*<sp/>trailer);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vrt_init_if_context(<ref refid="structvrt__if__context" kindref="compound">vrt_if_context</ref>*<sp/>if_context);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">uint32_t<sp/>vrt_words_fields(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvrt__header" kindref="compound">vrt_header</ref>*<sp/>header);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">uint32_t<sp/>vrt_words_trailer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvrt__header" kindref="compound">vrt_header</ref>*<sp/>header);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">uint32_t<sp/>vrt_words_if_context(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvrt__if__context" kindref="compound">vrt_if_context</ref>*<sp/>if_context);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>vrt_is_context(vrt_packet_type<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(STATIC_CAST(uint32_t,<sp/>type)<sp/>&amp;<sp/>0x4U)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>vrt_has_stream_id(vrt_packet_type<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(STATIC_CAST(uint32_t,<sp/>type)<sp/>&amp;<sp/>0x5U)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>vrt_is_platform_little_endian()<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>i<sp/>=<sp/>0x01234567;<sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>written<sp/>to<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(uint8_t*)(&amp;i)<sp/>==<sp/>0x67;</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/emil/libvrt/include/vrt/vrt_common.h"/>
  </compounddef>
</doxygen>
